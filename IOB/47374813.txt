In
our
previous
research
,
we
disclosed
and
analyzed
a
new
campaign
initiated
by
the
threat
actor
group
Earth
Preta
(
aka
Mustang
Panda
)
.
In
a
more
recent
campaign
we
¡¦
ve
been
tracking
,
we
discovered
Earth
Preta
delivering
lure
archives
via
spear-phishing
emails
and
Google
Drive
links
.
After
months
of
investigation
,
we
found
that
several
undisclosed
malware
and
interesting
tools
used
for
exfiltration
purposes
were
used
in
this
campaign
.
We
also
observed
that
the
threat
actors
were
actively
changing
their
tools
,
tactics
,
and
procedures
(
TTPs
)
to
bypass
security
solutions
.
In
this
blog
entry
,
we
will
introduce
and
analyze
the
other
tools
and
malware
used
by
Earth
Preta
.
Infection
chain
As
we
previously
mentioned
in
our
past
blog
entry
,
the
entire
attack
begins
with
a
spear-phishing
email
.
After
a
long-term
investigation
into
the
attack
routine
,
we
¡¦
ve
determined
that
the
full
infection
chain
works
as
follows
:
Figure
1
.
The
full
infection
chain
Figure
1
.
The
full
infection
chain
We
categorize
the
different
TTPs
into
six
stages
:
arrival
vectors
,
discovery
,
privilege
escalation
,
lateral
movement
,
command
and
control
(
C
&
C
)
and
exfiltration
,
respectively
.
In
our
previous
research
,
we
covered
most
of
the
new
TTPs
and
malware
during
the
first
stage
,
arrival
vectors
.
However
,
we
observed
that
some
of
TTPs
have
been
changed
.
In
the
following
sections
,
we
focus
on
the
updated
arrival
vectors
and
their
succeeding
stages
.
Arrival
vectors
We
previously
summarized
the
arrival
vectors
used
by
Earth
Preta
by
categorizing
them
into
three
types
(
DLL
sideloading
,
shortcut
links
,
and
fake
file
extensions
)
.
Starting
in
October
and
November
2022
,
we
observed
that
the
threat
actors
began
changing
their
TTPs
to
deploy
the
TONEINS
,
TONESHELL
,
and
PUBLOAD
malware
.
We
believe
that
the
threat
actors
are
employing
these
new
techniques
to
avoid
detection
.
Trojan.Win32.TONEINS
Based
on
our
earlier
observation
,
the
TONEINS
and
TONESHELL
malware
were
downloaded
from
the
Google
Drive
link
embedded
in
the
body
of
an
email
.
To
bypass
email-scanning
services
and
email
gateway
solutions
,
the
Google
Drive
link
has
now
been
embedded
in
a
lure
document
.
The
document
lures
users
into
downloading
a
malicious
password-protected
archive
with
the
embedded
link
.
The
files
can
then
be
extracted
inside
via
the
password
provided
in
the
document
.
By
using
this
technique
,
the
malicious
actor
behind
the
attack
can
successfully
bypass
scanning
services
.
Figure
2
.
A
lure
document
(
allegedly
concerning
the
government-related
Myanmar
Sustainable
Development
Plan
)
embedded
with
a
Google
Drive
link
and
a
password
Figure
2
.
A
lure
document
(
allegedly
concerning
the
government-related
Myanmar
Sustainable
Development
Plan
)
embedded
with
a
Google
Drive
link
and
a
password
For
the
new
arrival
vector
,
the
whole
infection
flow
has
been
changed
to
the
procedure
shown
in
Figure
3
.
Figure
3
.
Infection
flow
for
the
new
arrival
vector
Figure
3
.
Infection
flow
for
the
new
arrival
vector
File
name
Detection
name
Description
Letter
Head.docx
Decoy
document
with
Google
Drive
link
List
of
terrorist
personnel
at
the
border.rar
(
all
entries
below
are
part
of
this
archive
)
List
of
terrorist
personnel
at
the
border.exe
First-stage
legitimate
executable
for
DLL
sideloading
libcef.dll
Trojan.Win32.TONEINS
First-stage
malware
~
$
Evidence
information.docx
Second-stage
legitimate
executable
for
DLL
sideloading
~
$
List
of
terrorist
personnel
at
the
border.docx
Backdoor.Win32.TONESHELL
Second-stage
malware
Internal
Letter.docx
Decoy
document
Letter
Head.docx
Decoy
document
Table
1
.
Files
in
the
new
arrival
vector
After
analyzing
the
downloaded
archive
,
we
discovered
it
to
be
a
malicious
RAR
file
with
the
TONEINS
malware
libcef.dll
and
the
TONESHELL
malware
~List
of
terrorist
personnel
at
the
border.docx
.
The
infection
flow
for
these
is
similar
to
the
arrival
vector
type
C
in
our
previous
report
,
with
the
only
difference
being
that
the
fake
.docx
files
have
XOR-encrypted
content
to
prevent
detection
.
For
example
,
~
$
Evidence
information.docx
is
a
file
disguising
itself
as
an
Office
Open
XML
document
.
As
such
,
it
seems
harmless
and
can
even
be
opened
by
using
decompression
software
such
as
7-Zip
.
We
found
that
the
threat
actors
have
hidden
a
PE
file
in
one
of
the
archive
¡¦
s
ZIPFILERECORD
structures
.
The
TONEINS
malware
,
libcef.dll
,
will
decrypt
this
file
with
a
single
byte
in
XOR
operations
,
find
the
PE
header
,
and
drop
the
payload
to
the
specified
path
.
Figure
4
.
A
PE
file
is
revealed
after
decrypting
the
frData
member
in
the
last
ZIPFILECECORD
structure
.
Figure
4
.
A
PE
file
is
revealed
after
decrypting
the
frData
member
in
the
last
ZIPFILECECORD
structure
.
Figure
5
.
The
decryption
function
of
TONEINS
Figure
5
.
The
decryption
function
of
TONEINS
The
succeeding
behaviors
of
the
infection
flow
are
generally
the
same
as
those
in
our
previous
analysis
,
where
we
provide
more
details
.
Trojan.Win32.PUBLOAD
In
more
recent
cases
,
the
malware
PUBLOAD
was
also
being
delivered
through
Google
Drive
links
embedded
in
decoy
documents
.
Figure
6
.
The
lure
document
Invitation
letter
from
the
US
embassy.docx
Figure
6
.
The
lure
document
Invitation
letter
from
the
US
embassy.docx
Since
October
2022
,
we
have
been
observing
a
new
variant
of
PUBLOAD
,
which
uses
the
spoofed
HTTP
header
to
transfer
the
data
,
as
LAC
¡¦
s
report
also
discusses
.
In
contrast
to
the
previous
PUBLOAD
variant
,
it
prepends
an
HTTP
header
with
a
legitimate-looking
host
name
to
the
packets
.
We
believe
that
the
threat
actors
are
trying
to
conceal
malicious
data
among
normal
traffic
.
The
data
in
the
HTTP
body
is
the
same
as
the
past
variant
,
which
has
the
same
magic
bytes
17
03
03
and
the
encrypted
victim
information
.
We
were
able
to
successfully
retrieve
the
payload
from
a
live
C
&
C
server
and
were
therefore
able
to
continue
our
analysis
.
Figure
7
.
C
&
C
traffic
of
the
PUBLOAD
HTTP
variant
Figure
7
.
C
&
C
traffic
of
the
PUBLOAD
HTTP
variant
Once
the
payload
is
received
,
it
will
check
if
the
first
three
magic
bytes
are
17
03
03
and
if
the
following
two
bytes
are
the
size
of
payload
.
It
will
then
decrypt
the
encrypted
payload
with
the
predefined
RC4
key
78
5A
12
4D
75
14
14
11
6C
02
71
15
5A
73
05
08
70
14
65
3B
64
42
22
23
20
00
00
00
00
00
00
00
,
which
is
the
same
as
the
one
used
in
the
PUBLOAD
loader
.
Figure
8
.
The
first
payload
retrieved
from
the
PUBLOAD
HTTP
variant
Figure
8
.
The
first
payload
retrieved
from
the
PUBLOAD
HTTP
variant
After
decryption
,
it
then
checks
if
the
first
byte
of
the
decrypted
payload
is
0x06
.
The
decrypted
payload
contains
another
payload
that
is
XOR-encrypted
with
the
bytes
23
BE
84
E1
6C
D6
AE
52
90
.
Figure
9
.
The
second
payload
retrieved
from
the
PUBLOAD
HTTP
variant
Figure
9
.
The
second
payload
retrieved
from
the
PUBLOAD
HTTP
variant
After
this
is
decrypted
,
there
is
yet
another
final
backdoor
payload
that
supports
data
upload
and
command
execution
.
Figure
10
.
The
final
payload
of
the
PUBLOAD
HTTP
variant
Figure
10
.
The
final
payload
of
the
PUBLOAD
HTTP
variant
Command
Internal
string
0x03
-
0x01
-
0x1B
UploadBegin
error
:
%
d
!
0x1D
UploadData
error
:
%
d
!
0x1A
-
0x1E
CmdStart
error
:
%
d
!
0x1F
CmdWrite
error
:
%
d
!
0x30
CmdWrite
error
:
%
d
0x20
-
Table
2
.
Command
codes
in
the
PUBLOAD
HTTP
variant
In
addition
,
we
found
some
interesting
debug
strings
and
event
names
among
the
PUBLOAD
samples
.
Figure
11
.
Event
name
in
PUBLOAD
Figure
11
.
Event
name
in
PUBLOAD
Figure
12
.
Debug
string
in
PUBLOAD
Figure
12
.
Debug
string
in
PUBLOAD
In
summary
,
we
think
that
the
new
TONESHELL
and
PUBLOAD
archives
have
been
evolving
and
now
have
something
in
common
.
For
example
,
both
of
them
are
now
being
placed
in
decoy
documents
(
such
as
Google
Drive
links
)
in
order
to
bypass
antivirus
scanning
.
Discovery
Once
the
threat
actors
obtain
access
to
the
victim
¡¦
s
environment
,
they
can
start
inspecting
the
environment
via
the
following
commands
:
net
user
net
user
<
username
>
net
user
<
username
>
/DOMAIN
Privilege
escalation
In
this
campaign
,
we
discovered
several
tools
used
for
UAC
bypass
in
Windows
10
.
We
will
go
into
detail
for
each
of
them
.
HackTool.Win
32.ABPASS
HackTool.Win32.ABPASS
is
a
tool
used
to
bypass
UAC
in
Windows
10
.
Based
on
our
analysis
,
it
reuses
codes
from
the
function
ucmShellRegModMethod3
,
which
is
from
a
famous
open-source
project
called
UACME
.
A
report
from
Sophos
introduces
this
tool
.
This
tool
accepts
an
argument
,
and
the
following
data
is
written
into
registry
:
Registry
Key
Name
Value
HKEY_USERS\
<
SID
>
-1001_Classes\aaabbb32\shell\open\command
(
Default
)
argv
[
1
]
HKEY_USERS\
<
SID
>
-1001_Classes\ms-settings\CurVer
(
Default
)
aaabbb32
Table
3
.
Registry
keys
changed
by
ABPASS
It
also
changes
how
Windows
handles
the
ms-settings
protocol
¡X
in
this
case
,
the
string
ms-settings
is
a
Programmatic
Identifier
(
ProgID
)
.
If
the
CurVer
key
is
set
under
a
ProgID
,
it
will
be
used
for
versioning
and
mapping
the
current
ProgID
(
ms-settings
)
to
the
one
specified
in
the
CurVer
¡¦
s
default
value
.
In
turn
,
the
behavior
of
ms-settings
is
redirected
to
the
custom
defined
ProgID
aaabbb32
.
It
also
sets
up
a
new
ProgID
aaabbb32
and
its
shell
open
command
.
Finally
,
fodhelper.exe
or
computerDefaults.exe
will
be
executed
to
trigger
the
ms-settings
protocol
.
Figure
13
.
The
added
ProgID
aaabbb32
Figure
13
.
The
added
ProgID
aaabbb32
HackTool.Win
32.CCPASS
HackTool.Win32.CCPASS
is
another
tool
that
is
also
used
for
Windows
10
UAC
bypass
and
similarly
reuses
codes
from
the
function
ucmMsStoreProtocolMethod
in
the
project
UACME
.
Figure
14
.
Code
similarities
in
CCPASS
and
ucmMsStoreProtocolMethod
Figure
14
.
Code
similarities
in
CCPASS
and
ucmMsStoreProtocolMethod
It
works
in
a
similar
way
to
ABPASS
.
However
,
unlike
ABPASS
,
it
hijacks
the
ms-windows-store
protocol
.
The
hack
tool
CCPASS
works
as
follows
:
It
disables
the
application
association
toasts
for
the
protocol
ms-windows-store
.
It
creates
a
new
Shell
in
the
registry
.
It
invokes
the
undocumented
API
UserAssocSet
to
update
the
file
association
.
It
executes
WSReset.exe
to
trigger
this
protocol
.
In
Windows
10
and
above
,
the
system
shows
a
new
toast
dialog
for
selecting
the
open
application
for
the
selected
file
type
.
To
hide
this
window
,
the
tool
explicitly
adds
new
entries
to
HKCU\Software\Microsoft\Windows\CurrentVersion\ApplicationAssociationToasts
to
disable
all
toasts
related
to
the
protocol
ms-windows-store
.
Figure
15
.
An
example
of
the
application
association
toast
Figure
15
.
An
example
of
the
application
association
toast
Figure
16
.
Hiding
application
association
toasts
via
the
registry
Figure
16
.
Hiding
application
association
toasts
via
the
registry
Once
this
is
done
,
the
tool
starts
to
alter
the
shell
command
of
ms-windows-store
and
finally
triggers
it
using
WSReset.exe
.
SilentCleanup
In
Windows
10
,
there
is
a
native
Windows
service
called
¡§
SilentCleanup.
¡¨
This
service
has
the
highest
privileges
that
can
be
abused
for
Windows
10
UAC
bypass
.
Normally
,
this
service
is
intended
for
running
%
windir
%
\system32\cleanmgr.exe
.
However
,
the
environment
variable
%
windir
%
can
be
hijacked
and
changed
to
any
path
to
achieve
privilege
escalation
.
Figure
17
.
Malicious
commands
abusing
the
SilentCleanup
service
Figure
17
.
Malicious
commands
abusing
the
SilentCleanup
service
We
observed
that
the
threat
actors
used
this
technique
to
execute
%
PUBLIC
%
\1.exe
.
Lateral
movement
In
this
stage
,
we
observed
certain
malware
such
as
HIUPAN
and
ACNSHELL
(
initially
introduced
and
analyzed
by
Mandiant
and
Sophos
)
being
used
to
install
themselves
to
removable
disks
and
create
a
reverse
shell
.
USB
Worm
:
Worm.Win
32.HIUPAN
and+
Backdoor.Win
32.ACNSHELL
We
found
a
pair
of
malware
comprised
of
a
USB
worm
and
a
reverse
shell
¡Xincludin
g
a
USB
worm
and
a
reverse
shell
(
detected
as
Worm.Win32.HIUPAN
and
Backdoor.Win32.ACNSHELL
,
respectively
,
)
¡X
being
used
to
spread
themselves
over
removable
drives
.
Figure
18
shows
the
infection
chain
for
both
.
Figure
18
.
HIUPAN
and
ACNSHELL
infection
flow
Figure
18
.
HIUPAN
and
ACNSHELL
infection
flow
The
USB
Driver.exe
program
first
sideloads
u2ec.dll
,
which
then
loads
the
payload
file
usb.ini
.
They
have
the
following
PDB
strings
,
respectively
:
G
:
