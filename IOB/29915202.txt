The
Unicode
Consortium
recognized
multiple
representations
to
be
a
problem
and
has
revised
the
Unicode
Standard
to
make
multiple
representations
of
the
same
code
point
with
UTF-8
illegal
.
The
UTF-8
Corrigendum
lists
the
newly
restricted
UTF-8
range
(
See
references
)
.
Many
current
applications
may
not
have
been
revised
to
follow
this
rule
.
Verify
that
your
application
conform
to
the
latest
UTF-8
encoding
specification
.
Pay
extra
attention
to
the
filtering
of
illegal
characters
.
Another
consideration
is
error
recovery
.
To
guarantee
correct
recovery
after
corrupt
or
lost
bytes
,
decoders
must
be
able
to
recognize
the
difference
between
lead
and
trail
bytes
,
rather
than
just
assuming
that
bytes
will
be
of
the
type
allowed
in
their
position
.
For
security
reasons
,
a
UTF-8
decoder
must
not
accept
UTF-8
sequences
that
are
longer
than
necessary
to
encode
a
character
.
If
you
use
a
parser
to
decode
the
UTF-8
encoding
,
make
sure
that
parser
filter
the
invalid
UTF-8
characters
(
invalid
forms
or
overlong
forms
)
.
Look
for
overlong
UTF-8
sequences
starting
with
malicious
pattern
.
You
can
also
use
a
UTF-8
decoder
stress
test
to
test
your
UTF-8
parser
(
See
Markus
Kuhn
's
UTF-8
and
Unicode
FAQ
in
reference
section
)
Assume
all
input
is
malicious
.
Create
a
white
list
that
defines
all
valid
input
to
the
software
system
based
on
the
requirements
specifications
.
Input
that
does
not
match
against
the
white
list
should
not
be
permitted
to
enter
into
the
system
.
Test
your
decoding
process
against
malicious
input
.
