Using	B-TTPs
UTF-8	I-TTPs
Encoding	I-TTPs
to	I-TTPs
Bypass	I-TTPs
Validation	I-TTPs
Logic	I-TTPs
.	O
This	O
attack	O
is	O
a	O
specific	O
variation	O
on	O
leveraging	B-TTPs
alternate	I-TTPs
encodings	I-TTPs
to	O
bypass	B-TTPs
validation	I-TTPs
logic	I-TTPs
.	O
This	O
attack	O
leverages	O
the	O
possibility	O
to	O
encode	B-TTPs
potentially	I-TTPs
harmful	I-TTPs
input	I-TTPs
in	I-TTPs
UTF-8	I-TTPs
and	O
submit	O
it	O
to	O
applications	O
not	O
expecting	O
or	O
effective	O
at	O
validating	O
this	O
encoding	O
standard	O
making	O
input	O
filtering	O
difficult	O
.	O
UTF-8	O
(	O
8-bit	O
UCS/Unicode	O
Transformation	O
Format	O
)	O
is	O
a	O
variable-length	O
character	O
encoding	O
for	O
Unicode	O
.	O
Legal	O
UTF-8	O
characters	O
are	O
one	O
to	O
four	O
bytes	O
long	O
.	O
However	O
,	O
early	O
version	O
of	O
the	O
UTF-8	O
specification	O
got	O
some	O
entries	O
wrong	O
(	O
in	O
some	O
cases	O
it	O
permitted	O
overlong	O
characters	O
)	O
.	O
UTF-8	O
encoders	O
are	O
supposed	O
to	O
use	O
the	O
``	O
shortest	O
possible	O
''	O
encoding	O
,	O
but	O
naive	O
decoders	O
may	O
accept	O
encodings	O
that	O
are	O
longer	O
than	O
necessary	O
.	O
According	O
to	O
the	O
RFC	O
3629	O
,	O
a	O
particularly	O
subtle	O
form	O
of	O
this	O
attack	O
can	O
be	O
carried	O
out	O
against	O
a	O
parser	O
which	O
performs	O
security-critical	O
validity	O
checks	O
against	O
the	O
UTF-8	O
encoded	O
form	O
of	O
its	O
input	O
,	O
but	O
interprets	O
certain	O
illegal	O
octet	O
sequences	O
as	O
characters	O
.	O
The	O
application's	O
UTF-8	O
decoder	O
accepts	O
and	O
interprets	O
illegal	O
UTF-8	O
characters	O
or	O
non-shortest	O
format	O
of	O
UTF-8	O
encoding	O
.	O
Input	B-Vulnerability
filtering	I-Vulnerability
and	I-Vulnerability
validating	I-Vulnerability
is	I-Vulnerability
not	I-Vulnerability
done	I-Vulnerability
properly	I-Vulnerability
leaving	O
the	O
door	O
open	O
to	O
harmful	O
characters	O
for	O
the	O
target	O
host	O
.	O
The	O
Unicode	O
Consortium	O
recognized	O
multiple	O
representations	O
to	O
be	O
a	O
problem	O
and	O
has	O
revised	O
the	O
Unicode	O
Standard	O
to	O
make	O
multiple	O
representations	O
of	O
the	O
same	O
code	O
point	O
with	O
UTF-8	O
illegal	O
.	O
The	O
UTF-8	O
Corrigendum	O
lists	O
the	O
newly	O
restricted	O
UTF-8	O
range	O
(	O
See	O
references	O
)	O
.	O
Many	O
current	O
applications	O
may	O
not	O
have	O
been	O
revised	O
to	O
follow	O
this	O
rule	O
.	O
Verify	O
that	O
your	O
application	O
conform	O
to	O
the	O
latest	O
UTF-8	O
encoding	O
specification	O
.	O
Pay	O
extra	O
attention	O
to	O
the	O
filtering	O
of	O
illegal	O
characters	O
.	O
Another	O
consideration	O
is	O
error	O
recovery	O
.	O
To	O
guarantee	O
correct	O
recovery	O
after	O
corrupt	O
or	O
lost	O
bytes	O
,	O
decoders	O
must	O
be	O
able	O
to	O
recognize	O
the	O
difference	O
between	O
lead	O
and	O
trail	O
bytes	O
,	O
rather	O
than	O
just	O
assuming	O
that	O
bytes	O
will	O
be	O
of	O
the	O
type	O
allowed	O
in	O
their	O
position	O
.	O
For	O
security	O
reasons	O
,	O
a	O
UTF-8	O
decoder	O
must	O
not	O
accept	O
UTF-8	O
sequences	O
that	O
are	O
longer	O
than	O
necessary	O
to	O
encode	O
a	O
character	O
.	O
If	O
you	O
use	O
a	O
parser	O
to	O
decode	O
the	O
UTF-8	O
encoding	O
,	O
make	O
sure	O
that	O
parser	O
filter	O
the	O
invalid	O
UTF-8	O
characters	O
(	O
invalid	O
forms	O
or	O
overlong	O
forms	O
)	O
.	O
Look	O
for	O
overlong	O
UTF-8	O
sequences	O
starting	O
with	O
malicious	O
pattern	O
.	O
You	O
can	O
also	O
use	O
a	O
UTF-8	O
decoder	O
stress	O
test	O
to	O
test	O
your	O
UTF-8	O
parser	O
(	O
See	O
Markus	O
Kuhn	O
's	O
UTF-8	O
and	O
Unicode	O
FAQ	O
in	O
reference	O
section	O
)	O
Assume	O
all	O
input	O
is	O
malicious	O
.	O
Create	O
a	O
white	O
list	O
that	O
defines	O
all	O
valid	O
input	O
to	O
the	O
software	O
system	O
based	O
on	O
the	O
requirements	O
specifications	O
.	O
Input	O
that	O
does	O
not	O
match	O
against	O
the	O
white	O
list	O
should	O
not	O
be	O
permitted	O
to	O
enter	O
into	O
the	O
system	O
.	O
Test	O
your	O
decoding	O
process	O
against	O
malicious	O
input	O
.	O