Buffer	B-TTPs
Overflow	I-TTPs
attacks	I-TTPs
target	O
improper	B-Vulnerability
or	I-Vulnerability
missing	I-Vulnerability
bounds	I-Vulnerability
checking	I-Vulnerability
on	I-Vulnerability
buffer	I-Vulnerability
operations	I-Vulnerability
,	O
typically	O
triggered	O
by	O
input	B-TTPs
injected	I-TTPs
by	O
an	O
adversary	O
.	O
As	O
a	O
consequence	O
,	O
an	O
adversary	O
is	O
able	O
to	O
write	B-TTPs
past	I-TTPs
the	I-TTPs
boundaries	I-TTPs
of	I-TTPs
allocated	I-TTPs
buffer	I-TTPs
regions	I-TTPs
in	I-TTPs
memory	I-TTPs
,	O
causing	B-TTPs
a	I-TTPs
program	I-TTPs
crash	I-TTPs
or	I-TTPs
potentially	I-TTPs
redirection	I-TTPs
of	I-TTPs
execution	I-TTPs
as	O
per	O
the	O
adversaries'	O
choice	O
.	O
Targeted	O
software	O
performs	O
buffer	O
operations	O
.	O
Targeted	O
software	O
inadequately	B-Vulnerability
performs	I-Vulnerability
bounds-checking	I-Vulnerability
on	I-Vulnerability
buffer	I-Vulnerability
operations	I-Vulnerability
.	O
Adversary	O
has	O
the	O
capability	O
to	O
influence	O
the	O
input	O
to	O
buffer	O
operations	O
.	O
Use	O
a	O
language	O
or	O
compiler	O
that	O
performs	O
automatic	O
bounds	O
checking	O
.	O
Use	O
secure	O
functions	O
not	O
vulnerable	O
to	O
buffer	B-Vulnerability
overflow	I-Vulnerability
.	O
If	O
you	O
have	O
to	O
use	O
dangerous	O
functions	O
,	O
make	O
sure	O
that	O
you	O
do	O
boundary	O
checking	O
.	O
Compiler-based	O
canary	O
mechanisms	O
such	O
as	O
StackGuard	O
,	O
ProPolice	O
and	O
the	O
Microsoft	O
Visual	O
Studio	O
/GS	O
flag	O
.	O
Unless	O
this	O
provides	O
automatic	O
bounds	O
checking	O
,	O
it	O
is	O
not	O
a	O
complete	O
solution	O
.	O
Use	O
OS-level	O
preventative	O
functionality	O
.	O
Not	O
a	O
complete	O
solution	O
.	O
Utilize	O
static	O
source	O
code	O
analysis	O
tools	O
to	O
identify	O
potential	O
buffer	B-Vulnerability
overflow	I-Vulnerability
weaknesses	I-Vulnerability
in	I-Vulnerability
the	I-Vulnerability
software	I-Vulnerability
.	O