Assume
all
input
is
malicious
.
Create
a
white
list
that
defines
all
valid
input
to
the
software
system
based
on
the
requirements
specifications
.
Input
that
does
not
match
against
the
white
list
should
not
be
permitted
to
enter
into
the
system
.
Test
your
decoding
process
against
malicious
input
.
Be
aware
of
the
threat
of
alternative
method
of
data
encoding
and
obfuscation
technique
such
as
IP
address
encoding
.
When
client
input
is
required
from
web-based
forms
,
avoid
using
the
``
GET
''
method
to
submit
data
,
as
the
method
causes
the
form
data
to
be
appended
to
the
URL
and
is
easily
manipulated
.
Instead
,
use
the
``
POST
method
whenever
possible
.
Any
security
checks
should
occur
after
the
data
has
been
decoded
and
validated
as
correct
data
format
.
Do
not
repeat
decoding
process
,
if
bad
character
are
left
after
decoding
process
,
treat
the
data
as
suspicious
,
and
fail
the
validation
process
.
Refer
to
the
RFCs
to
safely
decode
URL
.
Regular
expression
can
be
used
to
match
safe
URL
patterns
.
However
,
that
may
discard
valid
URL
requests
if
the
regular
expression
is
too
restrictive
.
There
are
tools
to
scan
HTTP
requests
to
the
server
for
valid
URL
such
as
URLScan
from
Microsoft
(
http
:
//www.microsoft.com/technet/security/tools/urlscan.mspx
)
.
