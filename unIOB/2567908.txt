This
attack
targets
the
encoding
of
the
URL
.
An
attacker
can
take
advantage
of
the
multiple
way
of
encoding
an
URL
and
abuse
the
interpretation
of
the
URL
.
An
URL
may
contain
special
character
that
need
special
syntax
handling
in
order
to
be
interpreted
.
Special
characters
are
represented
using
a
percentage
character
followed
by
two
digits
representing
the
octet
code
of
the
original
character
(
%
HEX-CODE
)
.
For
instance
US-ASCII
space
character
would
be
represented
with
%
20
.
This
is
often
referred
as
escaped
ending
or
percent-encoding
.
Since
the
server
decodes
the
URL
from
the
requests
,
it
may
restrict
the
access
to
some
URL
paths
by
validating
and
filtering
out
the
URL
requests
it
received
.
An
attacker
will
try
to
craft
an
URL
with
a
sequence
of
special
characters
which
once
interpreted
by
the
server
will
be
equivalent
to
a
forbidden
URL
.
It
can
be
difficult
to
protect
against
this
attack
since
the
URL
can
contain
other
format
of
encoding
such
as
UTF-8
encoding
,
Unicode-encoding
,
etc
.
The
attacker
could
also
subvert
the
meaning
of
the
URL
string
request
by
encoding
the
data
being
sent
to
the
server
through
a
GET
request
.
For
instance
an
attacker
may
subvert
the
meaning
of
parameters
used
in
a
SQL
request
and
sent
through
the
URL
string
(
See
Example
section
)
.
The
application
should
accepts
and
decodes
URL
input
.
The
application
performs
insufficient
filtering/canonicalization
on
the
URLs
.
Refer
to
the
RFCs
to
safely
decode
URL
.
Regular
expression
can
be
used
to
match
safe
URL
patterns
.
However
,
that
may
discard
valid
URL
requests
if
the
regular
expression
is
too
restrictive
.
There
are
tools
to
scan
HTTP
requests
to
the
server
for
valid
URL
such
as
URLScan
from
Microsoft
(
http
:
//www.microsoft.com/technet/security/tools/urlscan.mspx
)
.
Any
security
checks
should
occur
after
the
data
has
been
decoded
and
validated
as
correct
data
format
.
Do
not
repeat
decoding
process
,
if
bad
character
are
left
after
decoding
process
,
treat
the
data
as
suspicious
,
and
fail
the
validation
process
.
Assume
all
input
is
malicious
.
Create
a
white
list
that
defines
all
valid
input
to
the
software
system
based
on
the
requirements
specifications
.
Input
that
does
not
match
against
the
white
list
should
not
be
permitted
to
enter
into
the
system
.
Test
your
decoding
process
against
malicious
input
.
Be
aware
of
the
threat
of
alternative
method
of
data
encoding
and
obfuscation
technique
such
as
IP
address
encoding
.
(
See
related
guideline
section
)
When
client
input
is
required
from
web-based
forms
,
avoid
using
the
``
GET
''
method
to
submit
data
,
as
the
method
causes
the
form
data
to
be
appended
to
the
URL
and
is
easily
manipulated
.
Instead
,
use
the
``
POST
method
whenever
possible
.
