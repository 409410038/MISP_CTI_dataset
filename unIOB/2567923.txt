XML
Nested
Payloads
.
Applications
often
need
to
transform
data
in
and
out
of
the
XML
format
by
using
an
XML
parser
.
It
may
be
possible
for
an
adversary
to
inject
data
that
may
have
an
adverse
effect
on
the
XML
parser
when
it
is
being
processed
.
By
nesting
XML
data
and
causing
this
data
to
be
continuously
self-referential
,
an
adversary
can
cause
the
XML
parser
to
consume
more
resources
while
processing
,
causing
excessive
memory
consumption
and
CPU
utilization
.
An
adversary
's
goal
is
to
leverage
parser
failure
to
his
or
her
advantage
.
In
most
cases
this
type
of
an
attack
will
result
in
a
XML
Denial
of
Service
(
XDoS
)
due
to
an
application
becoming
unstable
,
freezing
,
or
crashing
.
However
it
may
be
possible
to
cause
a
crash
resulting
in
arbitrary
code
execution
,
leading
to
a
jump
from
the
data
plane
to
the
control
plane
[
R.230.1
]
.
XDoS
is
most
closely
associated
with
web
services
,
SOAP
,
and
Rest
,
because
remote
service
requesters
can
post
malicious
XML
payloads
to
the
service
provider
designed
to
exhaust
the
service
provider
's
memory
,
CPU
,
and/or
disk
space
.
The
main
weakness
in
XDoS
is
that
the
service
provider
generally
must
inspect
,
parse
,
and
validate
the
XML
messages
to
determine
routing
,
workflow
,
security
considerations
,
and
so
on
.
It
is
exactly
these
inspection
,
parsing
,
and
validation
routines
that
XDoS
targets
.
This
attack
exploits
the
loosely
coupled
nature
of
web
services
,
where
the
service
provider
has
little
to
no
control
over
the
service
requester
and
any
messages
the
service
requester
sends
.
