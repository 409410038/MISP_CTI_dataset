O
pacote
PyMafka
possui
uma
estrutura
semelhante
ao
pacote
legítimo
,
a
não
ser
por
possuir
um
arquivo
setup.py
com
código
diferente
.
No
Python
,
o
arquivo
setup.py
é
utilizado
para
gerenciamento
do
próprio
pacote
,
contendo
as
intruções
para
instalação
e
remoção
.
O
pacote
malicioso
possui
uma
estrutura
que
o
permite
identificar
qual
é
o
sistema
operacional
onde
está
sendo
instalado
,
dessa
maneira
consegue
selecionar
qual
será
o
fluxo
adequado
para
cada
sistem
%
WINDIR
%
\
macOS
,
e
Linux
.
O
grande
problema
é
que
o
pacote
malicioso
utiliza
essa
capacidade
para
despejar
um
malware
do
tipo
trojan
no
sistema
,
dessa
forma
trabalhando
como
um
malware
do
tipo
Downloader
.
O
trojan
em
questão
é
um
payload
do
Cobalt
Strike
,
uma
ferramenta
legítima
que
geralmente
é
utilizada
por
profissionais
de
segurança
em
testes
de
intrusão
e
outras
simulações
de
ataques
cibernéticos
.
Porém
,
já
é
de
conhecimento
geral
que
muitos
grupos
de
atores
maliciosos
estejam
utilizando
essa
ferramenta
em
ataques
reais
.
Em
sistemas
Windows
,
o
malware
verifica
se
um
arquivo
com
o
caminho
absoluto
``
'
%
PUBLIC
%
\iexplorer.exe
''
existe
,
comportamento
comum
observado
em
malware
para
prevenir
execução
em
duplicidade
.
Caso
não
exista
,
o
malware
realiza
a
cópia
remota
de
dados
binários
de
um
servidor
através
de
requisição
HTTP
GET
e
salva
em
um
arquivo
no
mesmo
caminho
testado
,
então
utilizando
executa
o
arquivo
binário
no
sistema
.
Em
sistemas
Linux
,
o
malware
obtém
um
código
remoto
e
também
o
executa
através
do
shell
do
sistema
.
Em
sistemas
MacOs
,
assim
como
no
Windows
,
o
malware
verifica
a
existência
de
um
arquivo
(
payload
malicioso
)
,
caso
não
exista
,
realizará
o
download
,
atribuição
da
permissão
de
execução
pelo
comando
``
chmod
+x
''
e
o
executação
sem
que
os
logs
de
execução
sejam
exibidos
no
shell
,
isso
é
possível
através
do
uso
do
comando
nohup
que
redirecionará
a
saída
do
executável
para
um
arquivo
de
log
em
/tmp
.
