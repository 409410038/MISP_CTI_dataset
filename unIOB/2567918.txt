This
attack
utilizes
the
frequent
client-server
roundtrips
in
Ajax
conversation
to
scan
a
system
.
While
Ajax
does
not
open
up
new
vulnerabilities
per
se
,
it
does
optimize
them
from
an
attacker
point
of
view
.
In
many
XSS
attacks
the
attacker
must
get
a
``
hole
in
one
''
and
successfully
exploit
the
vulnerability
on
the
victim
side
the
first
time
,
once
the
client
is
redirected
the
attacker
has
many
chances
to
engage
in
follow
on
probes
,
but
there
is
only
one
first
chance
.
In
a
widely
used
web
application
this
is
not
a
major
problem
because
1
in
a
1,000
is
good
enough
in
a
widely
used
application
.
A
common
first
step
for
an
attacker
is
to
footprint
the
environment
to
understand
what
attacks
will
work
.
Since
footprinting
relies
on
enumeration
,
the
conversational
pattern
of
rapid
,
multiple
requests
and
responses
that
are
typical
in
Ajax
applications
enable
an
attacker
to
look
for
many
vulnerabilities
,
well-known
ports
,
network
locations
and
so
on
.
The
user
must
allow
JavaScript
to
execute
in
their
browser
.
Design
:
Use
browser
technologies
that
do
not
allow
client
side
scripting
.
Design
:
Utilize
strict
type
,
character
,
and
encoding
enforcement
Implementation
:
Ensure
all
content
that
is
delivered
to
client
is
sanitized
against
an
acceptable
content
specification
.
Implementation
:
Perform
input
validation
for
all
remote
content
.
Implementation
:
Perform
output
validation
for
all
remote
content
.
Implementation
:
Disable
scripting
languages
such
as
JavaScript
in
browser
Implementation
:
Patching
software
.
There
are
many
attack
vectors
for
XSS
on
the
client
side
and
the
server
side
.
Many
vulnerabilities
are
fixed
in
service
packs
for
browser
,
web
servers
,
and
plug
in
technologies
,
staying
current
on
patch
release
that
deal
with
XSS
countermeasures
mitigates
this
.
