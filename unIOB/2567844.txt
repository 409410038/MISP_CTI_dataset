Buffer
Overflow
via
Symbolic
Links
.
This
type
of
attack
leverages
the
use
of
symbolic
links
to
cause
buffer
overflows
.
An
attacker
can
try
to
create
or
manipulate
a
symbolic
link
file
such
that
its
contents
result
in
out
of
bounds
data
.
When
the
target
software
processes
the
symbolic
link
file
,
it
could
potentially
overflow
internal
buffers
with
insufficient
bounds
checking
.
The
attacker
can
create
symbolic
link
on
the
target
host
.
The
target
host
does
not
perform
correct
boundary
checking
while
consuming
data
from
a
resources
.
Pay
attention
to
the
fact
that
the
resource
you
read
from
can
be
a
replaced
by
a
Symbolic
link
.
You
can
do
a
Symlink
check
before
reading
the
file
and
decide
that
this
is
not
a
legitimate
way
of
accessing
the
resource
.
Because
Symlink
can
be
modified
by
an
attacker
,
make
sure
that
the
ones
you
read
are
located
in
protected
directories
.
Pay
attention
to
the
resource
pointed
to
by
your
symlink
links
(
See
attack
pattern
named
``
Forced
Symlink
race
''
)
,
they
can
be
replaced
by
malicious
resources
.
Always
check
the
size
of
the
input
data
before
copying
to
a
buffer
.
Use
a
language
or
compiler
that
performs
automatic
bounds
checking
.
Use
an
abstraction
library
to
abstract
away
risky
APIs
.
Not
a
complete
solution
.
Compiler-based
canary
mechanisms
such
as
StackGuard
,
ProPolice
and
the
Microsoft
Visual
Studio
/GS
flag
.
Unless
this
provides
automatic
bounds
checking
,
it
is
not
a
complete
solution
.
Use
OS-level
preventative
functionality
.
Not
a
complete
solution
.
